package com.example.OrderService.Service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.example.OrderService.Dto.MenuItemDTO;
import com.example.OrderService.Dto.OrderDTO;
import com.example.OrderService.Repository.OrderRepository;
import com.example.OrderService.entity.OrderEntity;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class OrderServiceImpl implements OrderService {

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private RestTemplate restTemplate;

    private static final String MENU_SERVICE_URL = "http://menu-service/menu/";
    
    @Override
    public OrderDTO createOrder(OrderDTO dto) {
        OrderEntity order = new OrderEntity();
        order.setTableId(dto.getTableId());
        order.setMenuItemIds(dto.getMenuItemIds());
        order.setStatus("PLACED");
        order = orderRepository.save(order);
        dto.setId(order.getId());
        return dto;
    }

    @Override
    public double getAmountForTable(Long tableId) {
        double sum=0.0;
        List<OrderEntity> allOrders = orderRepository.findAll();
        for(OrderEntity order : allOrders) {
        	if(order.getTableId().equals(tableId)) {
        		List<Long> ids =order.getMenuItemIds();
        		for(Long id : ids) {
        			sum+=getMenuPrice(id);
        		}
        		return sum;
        	}
        }
        return 0.0;
        
    }

    @Override
    public double getAmountForOrder(Long orderId) {
        Optional<OrderEntity> orderOpt = orderRepository.findById(orderId);
        return orderOpt.map(order -> order.getMenuItemIds().stream()
                .mapToDouble(this::getMenuPrice)
                .sum()).orElse(0.0);
    }

    @Override
    public List<OrderDTO> getAllOrders() {
        return orderRepository.findAll().stream().map(order -> {
            OrderDTO dto = new OrderDTO();
            dto.setId(order.getId());
            dto.setTableId(order.getTableId());
            dto.setMenuItemIds(order.getMenuItemIds());
            dto.setStatus(order.getStatus());
            return dto;
        }).collect(Collectors.toList());
    }
    @CircuitBreaker(name = "menuService", fallbackMethod = "getMenuItemPriceFallback")
    @Retry(name = "menuService", fallbackMethod = "getMenuItemPriceFallback")
    public double getMenuPrice(Long menuItemId) {
        String url = MENU_SERVICE_URL + menuItemId;
        MenuItemDTO menuItem = restTemplate.getForObject(url, MenuItemDTO.class);
        return menuItem != null ? menuItem.getPrice() : 0.0;
    }

    // Fallback method must match the signature: (Long, Throwable)
    public double getMenuItemPriceFallback(Long menuItemId, Throwable t) {
    	
        System.out.println("Fallback triggered for menu item ID " + menuItemId + ", reason: " + t.getMessage());
        return 0.001;
    }

}
